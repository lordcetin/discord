
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  userId String @unique
  displayName String
  username String
  birthday String
  image String?
  email String? @unique
  emailVerified DateTime?
  phone String
  hashedPassword String?
  createdAt String
  updated DateTime @updatedAt
  ip String
  city String
  region String
  country String
  postal String
  timezone String
  location String
  servers Server[]
  members Member[]
  channels Channel[]
}

model Account{
  id        String      @id @default(uuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? 
  access_token String? 
  expires_at Int?
  token_type String?
  scope String?
  id_token String? 
  session_state String?

  // user     User     @relation(fields: [userId], references: [userId],onDelete: Cascade)

  @@unique([provider, providerAccountId,userId])
}

model Session{
  id        String      @id @default(uuid())
  sessionToken String @unique
  ip String
  city String
  region String
  country String
  postal String
  timezone String
  location String
  userId String
  expires DateTime

  // user     User     @relation(fields: [userId], references: [userId],onDelete: Cascade)

  @@index([userId])
}

model Server {
  id        String      @id @default(uuid())
  name String
  image String
  inviteCode String @unique

  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id    String  @id @default(uuid())
  role MemberRole @default(GUEST)
  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsRecevied Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id    String    @id @default(uuid())
  name String
  type ChannelType @default(TEXT)
  private Boolean

  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id    String @id @default(uuid())
  content String

  fileUrl String? 

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id    String    @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId,memberTwoId])
  
}

model DirectMessage {
  id String @id @default(uuid())
  content String
  fileUrl String?

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])

}